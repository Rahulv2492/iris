/* @description Generates styles for the Button component */
@import '../../globals/sass/helpers-all';


$Button_primary-bg-color: $blue2;
$Button_primary-bg-color_hover: $blue1;
$Button_primary-bg-color_outline-hover: $blue5;

$Button_secondary-text-color: $gray3;
$Button_secondary-text-color_outline: $gray6;
$Button_secondary-bg-color: $gray8;
$Button_secondary-bg-color_hover: $gray7;
$Button_secondary-bg-color_outline-hover: $gray5;

$Button_negative-bg-color: $red2;
$Button_negative-bg-color_hover: $red1;
$Button_negative-bg-color_outline-hover: $red5;

$Button_positive-bg-color: $green2;
$Button_positive-bg-color_hover: $green1;
$Button_positive-bg-color_outline-hover: $green5;

$Button_icon-size-large: rem-calc(16);
$Button_icon-size-medium: rem-calc(16);
$Button_icon-size-small: rem-calc(12);
$Button_icon-size-xSmall: rem-calc(8);

@function calculateLineHeightTarget($fontSize, $targetLineHeight)  {
  @return $targetLineHeight/$fontSize;
}

@mixin autoWidthSettings() {
  width: auto;
  margin-left: rem-calc(8);
}

.Button {
  position: relative;
  appearance: none;
  display: inline-flex;
  align-items: center;
  justify-content: center;
  margin: 0 0 rem-calc(8) 0;
  font-family: $g-font-family-primary;
  font-weight: 500;
  border-width: 1px;
  border-style: solid;
  border-radius: rem-calc($g-radius);
  transition: all #{$iris_transition-base};
  vertical-align: middle;
  letter-spacing: .02rem;
  width: 100%;

  &:hover {
    cursor: pointer;
  }

  &:active {
    outline: 0;
  }

  &:first-of-type  {
    margin-left: 0;
  }
}

.autoWidth_small {
  @include autoWidthSettings();
}

//Todo: replace with shared media queries
@media screen and (min-width: 40em) {
  .autoWidth_medium {
    @include autoWidthSettings();
  }
}

@media screen and (min-width: 50em) {
  .autoWidth_large {
    @include autoWidthSettings();
  }
}

@media screen and (min-width: 60em) {
  .autoWidth_xLarge {
    @include autoWidthSettings();
  }
}


//Sizes

.xSmall {
  font-size: rem-calc(12);
  line-height: 1.9;
  padding: 0 .375rem;
  border-radius: rem-calc($g-radius-sm);
  min-width: rem-calc(48);
}

.small {
    font-size: rem-calc(14);
    line-height: calculateLineHeightTarget(14, 30);
    padding: 0 rem-calc(12);
    min-width: rem-calc(68);
}

.medium {
    font-size: rem-calc(14);
    line-height: calculateLineHeightTarget(14, 38);
    padding: 0 rem-calc(16);
    min-width: rem-calc(84);
}

.large {
    font-size: rem-calc(16);
    line-height: calculateLineHeightTarget(16, 46);
    padding: 0 rem-calc(24);
    min-width: rem-calc(112);
}

//types

.primary,
.primaryOutline:hover {
  color: $white;
  background-color: $Button_primary-bg-color;
  border-color: $Button_primary-bg-color;
}

.primary:hover {
  background-color: $Button_primary-bg-color_hover;
  border-color: $Button_primary-bg-color_hover;
}

.primary:active,
.primaryOutline:active {
  background-color: darken($Button_primary-bg-color_hover, 10%);
}

.primaryOutline {
  background-color: transparent;
  border-color: $Button_primary-bg-color;
  color: $Button_primary-bg-color;
}

.secondary,
.secondaryOutline:hover {
  color: $Button_secondary-text-color;
  background-color: $Button_secondary-bg-color;
  border-color: $Button_secondary-bg-color;
}

.secondary:hover {
  background-color: $Button_secondary-bg-color_hover;
  border-color: $Button_secondary-bg-color_hover;
}

.secondary:active,
.secondaryOutline:active {
    background-color: darken($Button_secondary-bg-color_hover, 6%);
}

.secondaryOutline {
  background-color: transparent;
  border-color: $Button_secondary-text-color_outline;
  color: $Button_secondary-text-color;
}

.negative,
.negativeOutline:hover {
  color: $white;
  background-color: $Button_negative-bg-color;
  border-color: $Button_negative-bg-color;
}

.negative:hover {
  background-color: $Button_negative-bg-color_hover;
  border-color: $Button_negative-bg-color_hover;
}

.negative:active,
.negativeOutline:active {
  background-color: darken($Button_negative-bg-color_hover, 10%);
}


.negativeOutline {
  background-color: transparent;
  border-color: $Button_negative-bg-color;
  color: $Button_negative-bg-color;
}

.positive,
.positiveOutline:hover {
  color: $white;
  background-color: $Button_positive-bg-color;
  border-color: $Button_positive-bg-color;
}

.positive:hover {
  background-color: $Button_positive-bg-color_hover;
  border-color: $Button_positive-bg-color_hover;
}

.positive:active,
.positiveOutline:active {
  background-color: darken($Button_positive-bg-color_hover, 10%);
}


.positiveOutline {
  background-color: transparent;
  border-color: $Button_positive-bg-color;
  color: $Button_positive-bg-color;
}

.transparent {
  background-color: rgba(255,255,255,.2);
  border-color: transparent;
  color: $white;

  &:hover {
    background-color: rgba(255,255,255,.3);
  }

  &:active {
    background-color: rgba(255,255,255,.5);
  }
}


// Icon Buttons

.Icon{

  height: 1rem;
  width: 1rem;
  position: relative;
  path {
    fill: currentColor;
  }

}

.Icon_xSmall,
.Icon_xSmall svg
 {
  height: $Button_icon-size-xSmall;
  width: $Button_icon-size-xSmall;
}

.Icon_small,
.Icon_small svg {
  height: $Button_icon-size-small;
  width: $Button_icon-size-small;
  top: rem-calc(1);
}

.Icon_medium,
.Icon_medium svg
 {
   height: $Button_icon-size-medium;
   width: $Button_icon-size-medium;
   top: rem-calc(3);
}

.Icon_large,
.Icon_large svg {
  height: $Button_icon-size-large;
  width: $Button_icon-size-large;
  top: rem-calc(2);
}

.Icon_beforeLabel {
  margin-right: .5em;
}

.Icon_afterLabel{
  margin-left: .5em;
}

// All Disable Buttons are the same and override any other applied styles
.Button:disabled{
  color: $gray6;
  background-color: $gray7;
  border-color: $gray7;
  cursor: not-allowed;
}
