// Common Global Mix-Ins ____________________________________________________________

// Background size
@mixin background_size($width, $height) {
    background-size: $width $height;
}

// Linear Background Gradient (direction can be "vertical" or "horizontal")
@mixin loose_linear_gradient($background_color, $direction, $color_stops...) {
    background-color: $background_color;
    background: $background_color linear-gradient($direction, $color_stops);
}

// @deprecated - Don't use
@mixin linear_gradient($direction, $color_a, $color_b, $position_a: 0, $position_b: 1) {
    @if ($direction == 'vertical') {
        background: linear-gradient(to bottom, $color_a $position_a * 100%, $color_b $position_b * 100%);
    }
    @else {
        background: linear-gradient(to right, $color_a $position_a * 100%, $color_b $position_b * 100%);
    }
}

// Single-line ellipsis
@mixin ellipsis {
    overflow: hidden;
    white-space: nowrap;
    text-overflow: ellipsis;
}

// Multi-line ellipsis
@mixin paragraph_ellipsis($num_lines) {
    display: -webkit-box;
    overflow : hidden;
    text-overflow: ellipsis;
    -webkit-line-clamp: $num_lines;
    -webkit-box-orient: vertical;
}

// Applies rounded corners to a specific side of an element
@mixin border_radius_side($side, $radius) {

    @if $side == left {
        border-top-left-radius: $radius;
        border-bottom-left-radius: $radius;
    }

    @if $side == right {
        border-top-right-radius: $radius;
        border-bottom-right-radius: $radius;
    }

    @if $side == top {
        border-top-left-radius: $radius;
        border-top-right-radius: $radius;
    }

    @if $side == bottom {
        border-bottom-left-radius: $radius;
        border-bottom-right-radius: $radius;
    }

}

// Non strict version allowing for multiple shadows
@mixin loose_box_shadow($shadow...) {
   @include vendors(box-shadow, $shadow)
}

// Applies a drop shadow. If you need to support older versions of Android,
// set the $support_android variable to 1 in your SCSS file BEFORE calling
// @import "_common".
@mixin box_shadow($offset_x, $offset_y, $blur_radius, $color, $spread: 0) {
    // Set the variable to 0 only if it's not already set.
    $support_android: 0 !default;
    @if ($support_android == 1) {
        -webkit-box-shadow: $offset_x $offset_y $blur_radius $spread $color;
    }

    box-shadow: $offset_x $offset_y $blur_radius $spread $color;
}

// Applies an inset drop shadow
@mixin inner_shadow($offset_x, $offset_y, $blur_radius, $color, $spread: 0) {
    // Set the variable to 0 only if it's not already set.
    $support_android: 0 !default;
    @if ($support_android == 1) {
        -webkit-box-shadow: inset $offset_x $offset_y $blur_radius $spread $color;
    }

    box-shadow: inset $offset_x $offset_y $blur_radius $spread $color;
}

// Complex box shadow that include drop-shadow and inset drop-shadow
@mixin complex_box_shadow($drop_offset_x, $drop_offset_y, $drop_blur, $drop_color, $inset_offset_x, $inset_offset_y, $inset_blur, $inset_color) {
    // Set the variable to 0 only if it's not already set.
    $support_android: 0 !default;
    @if ($support_android == 1) {
        -webkit-box-shadow: $drop_offset_x $drop_offset_y $drop_blur $drop_color, $inset_offset_x $inset_offset_y $inset_blur $inset_color inset;
    }

    box-shadow: $drop_offset_x $drop_offset_y $drop_blur $drop_color, $inset_offset_x $inset_offset_y $inset_blur $inset_color inset;
}

@mixin rotate($degrees) {
    -webkit-transform: rotate($degrees);
    transform: rotate($degrees);
}

@mixin transition($property: all, $duration: 0.125s, $ease: ease-out, $delay: 0s) {
    transition: $property $duration $ease $delay;
}

@mixin loose_transition($transition...) {
    transition: $transition;
}

@mixin transition_property($property) {
    transition-property: $property;
}

@mixin transition_duration($duration) {
    transition-duration: $duration;
}

@mixin transition_timing_function($timing_function) {
    transition-timing-function: $timing_function;
}

@mixin transition_delay($delay) {
    transition-delay: $delay;
}

@mixin disable_select {
    -webkit-user-select: none;
    -khtml-user-select: none;
    -moz-user-select: none;
    user-select: none;
    cursor: default;
}

@mixin rounded_badge {
    display: inline-block;
    width: 30px;
    margin: 0 3px 0 0;
    padding: 3px;
    font-size: 8px;
    font-weight: 700;
    line-height: 8px;
    color: $White;
    text-align: center;
    text-transform: uppercase;
    vertical-align: middle;
    border-radius: 3px;
}

@mixin offstage {
    position: absolute;
    left: -9999px;
    top: -9999px;
}

@mixin simple_transition($duration: 0.125s, $property: all, $easing: ease-out, $delay: 0s) {
    transition:         $property $duration $easing $delay;
}

@mixin clearfix {
    &::after {
        content: "";
        display: table;
        clear: both;
    }
}

@mixin textarea_limit($height, $multiplier_limit: 3, $resize: vertical) {
    height: $height;
    min-height: $height;
    max-height: $height * $multiplier_limit;
    resize: $resize;
}

@mixin box_sizing($type: content-box) {
    -moz-box-sizing: $type;
    -webkit-box-sizing: $type;
    box-sizing: $type;
}

// @deprecated
// We can use the non-prefixed version of box-sizing now
@mixin border_box() {
    -webkit-box-sizing: border-box;
    -moz-box-sizing: border-box;
    box-sizing: border-box;
}

@mixin transform($transform) {
    -webkit-transform: $transform;
    transform: $transform;
}

@mixin transform_origin($transform_origin) {
    -webkit-transform-origin: $transform_origin;
    transform-origin: $transform_origin;
}

@mixin appearance($appearance) {
    -moz-appearance: $appearance;
    -ms-appearance: $appearance;
    -o-appearance: $appearance;
    -webkit-appearance: $appearance;
    appearance: $appearance;
}

@mixin focus_outline {
    outline: 1px dotted $light_slate;
}


// Can simplify all mixins with the vendor mixin but
// this one doesnt work since we need to escape sass' parsing
// on the @ symbol in front of -keyframes. Apparently it's fixed
// in sass 3.2. http://stackoverflow.com/questions/10372717/how-to-create-a-keyframes-mixin-in-scss-3-1-16
// In which case we need to upgrade ruby. at least on cougar.
// sigh....
// still works for basic property: value things, so we can simplify this whole file
@mixin vendors($property, $value: null) {
    @each $vendor in webkit, moz, o, ms {
        @if $value == null {
            \@-#{$vendor}-keyframes #{$property} {
                @content;
            }
        }
        @else {
            -#{$vendor}-#{$property}: $value;
        }
    }

    @if $value == null {
        @-keyframes #{$property} {
            @content;
        }
    }
    @else {
        #{$property}: $value;
    }
}

// EXTRA CSS3 VENDOR PREFIXED PROPERTIES ____________________________________

// Use this if you want to declare multiple properties in a single transition
@mixin transitions($duration, $ease, $properties...) {
    transition-property: $properties;

    transition-duration: $duration;

    transition-timing-function: $ease;
}

@mixin perspective($value) {
    -webkit-perspective: $value;
    -moz-perspective: $value;
    -ms-perspective: $value;
    -o-perspective: $value;
    perspective: $value;
}

@mixin perspective_origin($value) {
    -webkit-perspective-origin: $value;
    -moz-perspective-origin: $value;
    -ms-perspective-origin: $value;
    -o-perspective-origin: $value;
    perspective-origin: $value;
}

@mixin transform_style($value) {
    -webkit-transform-style: $value;
    transform-style: $value;
}

@mixin center_align($width:null, $height:null) {
    @if $width {
        position: absolute;
        left: 50%;
        margin-left: -($width / 2);
    }

    @if $height {
        position: absolute;
        top: 50%;
        margin-left: -($height / 2);
    }
}

// Used to separate two (or more) elements with equal spacing before and after
// a divider line.
@mixin divider($spacing: $default_spacing, $border: 1px dotted $light_gray) {
    margin-top: $spacing;
    padding-top: $spacing;
    border-top: $border;
}

// Retina background images

// $background = path to the background image as string, excluding the extension
// $extension = file name extension of background image as string. e.g. '.png'
// $width, $height = $width and $height of background image at 1x. don't stringify. e.g. 176px
// example usage: @include retina_bg_image('../../images_v6/logged_out/vod', '.jpg', 178px, 197px);

@mixin retina_bg_image($background, $extension, $width, $height) {
    background-image: url(#{$background + $extension});

    @media only screen and (-webkit-min-device-pixel-ratio: 2),
        only screen and (   min--moz-device-pixel-ratio: 2),
        only screen and (     -o-min-device-pixel-ratio: 2/1),
        only screen and (        min-device-pixel-ratio: 2),
        only screen and (                min-resolution: 192dpi),
        only screen and (                min-resolution: 2dppx) {
            background-image: url(#{$background + '@2x' + $extension});
            background-size: $width $height;
    }
}

// Used to create a progress bar flow list like the one in /help/uploaindg
//
// - $dot_size and $bar_height must be even numbers
// - the step count must reflect the li count in the list
@mixin dot_progress($step_count, $bar_width, $bar_height, $dot_size, $dot_color_inactive, $dot_color_active) {
    margin: 20px 0;
    height: $bar_height;

    > li {
        float: left;
        height: $bar_height;
        background-color: $dot_color_inactive;
        width: #{progress_marker_width($bar_width, $step_count)}px;
        @include simple_transition($duration: 0.32s);

        &.last {
            display: block;
            width: 0;
        }

        button {
            position: absolute;
            display: block;
            margin-top: -($dot_size - $bar_height) / 2;
            width: $dot_size;
            height: $dot_size;
            background-color: $dot_color_inactive;
            border: none;
            border-radius: $dot_size;

            &:hover {
                cursor: default;
            }
        }

        &.filling {
            display: none;
        }

        &.complete {
            background-color: $dot_color_active;

            &.filling {
                display: block;
                position: absolute;
                background-color: $dot_color_active;
                width: progress_marker_animation($bar_width, $step_count, $dot_size);
            }
        }

        &.complete,
        &.current {
            button {
                background-color: $dot_color_active;

                &:hover {
                    background-color: darken($dot_color_active, 10%);
                    cursor: pointer;
                }
            }
        }

        &.skipped {
            background-color: $dot_color_inactive;

            button {
                background-color: $dot_color_inactive;
            }
        }

        &.success {
            background-color: $dot_color_inactive;
        }
    }
}

@mixin read_more($bottom: 0, $left: 0, $important: true) {
    .read_more {
        @include simple_transition(0.3s, all, ease-in-out);

        &.collapsed {
            overflow: hidden;
            position: relative;

            &:after {
                content: "";
                display: block;
                height: 100px;
                width: 100%;
                position: absolute;
                left: 0;
                bottom: -50px;

                @if $important {
                    background-image: linear-gradient(to top, rgba(244, 245, 247, 1), rgba(244, 245, 247, 1) 75%, rgba(244, 245, 247, 0)) !important;
                } @else {
                    background-image: linear-gradient(to top, rgba(244, 245, 247, 1), rgba(244, 245, 247, 1) 75%, rgba(244, 245, 247, 0));
                }
            }
        }

        &:after {
            display: none;
        }

    }

    .more_link {
        @include simple_transition(0.3s, all, ease-in-out);
        opacity: 0;
        height: 0;

        &.collapsed {
            display: inline-block;
            position: absolute;
            bottom: $bottom;
            left: $left;
            z-index: z-index(base);
            opacity: 1;
            height: 20px;
        }
    }
}

//===================== By Malika:

@mixin g-iris-arrow($rotation, $color, $size: sm, $hover: null, $psuedo: 'after') {
    $arrow_rotation-opts: (
        top:    rotate(180deg),
        down:   none,
        right:  rotate(270deg),
        left:   rotate(90deg)
    );

    $arrow_size-opts: (
        sm: '8px',
        md: '12px',
        lg: '16px'
    );

    $arrow-rotation: map-get($arrow_rotation-opts, $rotation);
    $arrow-size: map-get($arrow_size-opts, $size);


    @if ($psuedo == 'after') {
        &::after {
            content: "";
            position: relative;
            display: inline-block;
            width: #{$arrow-size};
            height: #{$arrow-size};
            background: svg-url('<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 8 8"><path fill="#{$color}" d="M7.707 2.293c-.391-.391-1.024-.391-1.414 0L4 4.586 1.707 2.293c-.391-.391-1.024-.391-1.414 0-.391.391-.391 1.024 0 1.414l3 3c.391.391 1.024.391 1.414 0l3-3c.391-.39.391-1.024 0-1.414z"/></svg>');
            background-repeat: no-repeat;
            background-size: cover;
            transform: #{$arrow_rotation};
            margin-left: rem-calc($g-spacing-sm);
            transition: background 0.1s ease-in-out;

        }
    } @elseif ($psuedo == 'before') {
        &::before {
            content: "";
            position: relative;
            display: inline-block;
            width: #{$arrow-size};
            height: #{$arrow-size};
            background: svg-url('<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 8 8"><path fill="#{$color}" d="M7.707 2.293c-.391-.391-1.024-.391-1.414 0L4 4.586 1.707 2.293c-.391-.391-1.024-.391-1.414 0-.391.391-.391 1.024 0 1.414l3 3c.391.391 1.024.391 1.414 0l3-3c.391-.39.391-1.024 0-1.414z"/></svg>');
            background-repeat: no-repeat;
            background-size: cover;
            transform: #{$arrow_rotation};
            margin-right: rem-calc($g-spacing-sm);
            transition: background 0.1s ease-in-out;
        }
    } @else {
        width: #{$arrow-size};
        height: #{$arrow-size};
        background: svg-url('<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 8 8"><path fill="#{$color}" d="M7.707 2.293c-.391-.391-1.024-.391-1.414 0L4 4.586 1.707 2.293c-.391-.391-1.024-.391-1.414 0-.391.391-.391 1.024 0 1.414l3 3c.391.391 1.024.391 1.414 0l3-3c.391-.39.391-1.024 0-1.414z"/></svg>');
        background-repeat: no-repeat;
        transform: #{$arrow_rotation};
        @content;
    }

    @if ($hover != null) {
        &:hover {
            @if ($psuedo == 'after') {
                &::after {
                    background: svg-url('<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 8 8"><path fill="#{$hover}" d="M7.707 2.293c-.391-.391-1.024-.391-1.414 0L4 4.586 1.707 2.293c-.391-.391-1.024-.391-1.414 0-.391.391-.391 1.024 0 1.414l3 3c.391.391 1.024.391 1.414 0l3-3c.391-.39.391-1.024 0-1.414z"/></svg>');
                }
            } @elseif ($psuedo == 'before') {
                &:before {
                    background: svg-url('<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 8 8"><path fill="#{$hover}" d="M7.707 2.293c-.391-.391-1.024-.391-1.414 0L4 4.586 1.707 2.293c-.391-.391-1.024-.391-1.414 0-.391.391-.391 1.024 0 1.414l3 3c.391.391 1.024.391 1.414 0l3-3c.391-.39.391-1.024 0-1.414z"/></svg>');
                }
            } @else {
                background: svg-url('<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 8 8"><path fill="#{$hover}" d="M7.707 2.293c-.391-.391-1.024-.391-1.414 0L4 4.586 1.707 2.293c-.391-.391-1.024-.391-1.414 0-.391.391-.391 1.024 0 1.414l3 3c.391.391 1.024.391 1.414 0l3-3c.391-.39.391-1.024 0-1.414z"/></svg>');
            }
        }
    }
}

@mixin g-boxSize($width, $height:$width) {
    width: $width;
    height: $height;
}

//Used to add triangles—carrots—to containers (e.g. the mature badge tooltip)
@mixin g-carrot($position1: top, $position2: right, $bgcolor: $White, $border-color: null) {
    $carrotPosition: (
        top: (
            right: (top:-11px, right:30px),
            left: (top:-11px, left:30px),
            center: (top:-10px, left: 50%, transform: translateX(-50%) rotate(90deg))
        ),
        right: (
            top: (top: 16px, right: -9px),
            bottom: (bottom: 16px, right: -9px)
        ),
        bottom: (
            right: (bottom:-11px, right:30px),
            left: (bottom:-11px, left:30px),
            center: (bottom: -10px, left: 50%, transform: translate(-50%) rotate(-90deg))
        ),
        left: (
            top: (top: 16px, left: -9px),
            bottom: (bottom: 16px, left: -9px)
        )
    );

    $carrotRotation: (
        top: rotate(90deg),
        right: scale(-1),
        bottom: rotate(-90deg),
        left: 'none'
    );

    $borderPosition: (
        top: (margin-top: rem-calc(-1)),
        right: (margin-right: rem-calc(-2)),
        bottom: (margin-bottom: rem-calc(-2)),
        left: (margin-left: rem-calc(-1))
    );

    &:before,
    &:after {
        content: "";
        display: block;
        position: absolute;

        width: 0;
        height: 0;

        border-width: 7px 9px 7px 0;
        border-style: solid;
        border-color: $g-transparent $bgcolor $g-transparent $g-transparent;

        @each $pos, $val in $carrotRotation {
          @if($pos == $position1) {
            transform: #{$val};
          }
        }

        $currentPosition: g-map-deep-get($carrotPosition, $position1, $position2);
        @if $currentPosition {
            @each $key, $value in $currentPosition {
              #{$key}: #{$value};
            }
        } @else {
            @content;
        }
    }

    @if ($border-color != null) {
        &:before {
            $currentPosition: g-map-deep-get($borderPosition, $position1);
            @each $key, $value in $currentPosition {
              #{$key}: #{$value};
            }

            border-top: 7px solid $g-transparent;
            border-right: 9px solid $border-color;
            border-bottom: 7px solid $g-transparent;
        }
    }
}

// maintain aspect-ratio while resizing
//
// parent container should hold mixin with max-width and max-height declared
// child element for resizing should have 100% width and height
@mixin aspect-ratio($ratio-or-width, $height: null) {
  $padding: if($height, percentage($height/$ratio-or-width), percentage(1/$ratio-or-width));

  &:before {
    content:'';
    float: left;
    padding-bottom: $padding;
  }

  &:after  {
    content:'';
    display: table;
    clear: both;
  }
}
